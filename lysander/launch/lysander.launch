<launch>
	<arg name="do_hector_costmap" default="true" />
	<arg name="do_hector_mapping" default="false" />
  <arg name="do_map_server" default="false" />
	<arg name="do_move_base" default="true" />
	<arg name="do_rplidar" default="true" />
	<arg name="do_motor_controller" default="true" />

  <arg name="map_file" default="$(find lysander)/maps/Snowberry.yaml"/>


	<!-- publish the URDF -->
	<param name="robot_description" command="$(find xacro)/xacro.py $(find neato_node)/urdf/neato.urdf.xacro" />

	<!-- publish the robot state transforms -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" >
		<param name="use_gui" value="False"/>
	</node>


	<!-- TF for position of LIDAR in robot -->
	<node pkg="tf" type="static_transform_publisher" name="tf_base_link_to_laser_frame" args="-0.178 0 0.15 0 0 0 1 base_link laser_frame 100" />

	<node pkg="tf" type="static_transform_publisher" name="tf_base_footprint_to_base_stabilized" args="0.00 0 -0.063 0 0 0 base_footprint base_stabilized 100" />

	<node pkg="tf" type="static_transform_publisher" name="tf_base_stabilized_to_base_link" args="0 0 0.15 0 0 0 1 base_stabilized base_link 100" />

	<!--node pkg="tf" type="static_transform_publisher" name="tf_base_link_to_camera_link" args="0.0075 0 0.15 0 0 0 1 base_link camera_link 100" /-->

	<!-- Bring up motor controller -->
    <include if="$(arg do_motor_controller)" file="$(find motor_controller)/launch/motor.launch" >
        <arg name="do_odom_tf" value="true" />
    </include>

    <!-- Bring up RPLIDAR -->
	<node if="$(arg do_rplidar)" name="rplidarNode" pkg="rplidar_ros"  type="rplidarNode" output="screen">
		<param name="serial_port"         type="string" value="/dev/ttyUSB0" />  
		<param name="serial_baudrate"     type="int"    value="115200" />
		<param name="frame_id"            type="string" value="laser_frame" />
		<param name="inverted"            type="bool"   value="false" />
		<param name="angle_compensate"    type="bool"   value="true" />
	</node>

  <!-- Bring up map_server -->
  <node if="$(arg do_map_server)" name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />


	<!-- Bring up hector_mapping -->
	<include if="$(arg do_hector_mapping)" file="$(find lysander)/launch/hector_mapping.launch" >
	</include>

	<!-- Bring up hector costmap -->
	<!--include if="$(arg do_hector_costmap)" file="$(find hector_costmap)/launch/costmap.launch" >
	</include-->
	<node if="$(arg do_hector_costmap)" pkg="hector_costmap" type="hector_costmap" name="hector_costmap" output="screen" respawn="false">
	    <param name="cost_map_topic" value="cost_map" />
	    <param name="map_frame_id" value="map" />
	    <param name="local_transform_frame_id" value="base_link" />
	    <param name="initial_free_cells_radius" value="0.3" />
	    <param name="update_radius" value="1.4"/>
	    <param name="costmap_pub_freq" value="4.0" />
	    <param name="sys_msg_topic" value="syscommand" />

	    <param name="use_grid_map" value="true" />
	    <param name="grid_map_topic" value="scanmatcher_map" />

	    <param name="use_elevation_map" value="true" />
	    <param name="elevation_map_topic" value="elevation_map_local" />

	    <param name="use_cloud_map" value="false" />
	    <param name="cloud_topic" value="openni/depth/points" />

	<!-- Not necessary to set, set by dynamic reconfigure -->
	    <!--param name="max_delta_elevation" value="0.08"/-->
	    <!--param name="allow_elevation_map_to_clear_occupied_cells" value="true" /-->
	    <!--param name="max_clear_size" value="4" /-->
	    <!--param name="slize_min_height" value="0.3" /-->
	    <!--param name="slize_max_height" value="0.4" /-->
	<!-- Not necessary to set, set by scanmatcher -->
	    <!--param name="map_resolution" value="0.05" /-->
	    <!--param name="max_grid_size_x" value="1024" /-->
	    <!--param name="max_grid_size_y" value="1024" /-->
	<!-- Not necessary to set, set by elvation_mapping -->
	    <!-- param name="elevation_resolution" value="0.01" / -->
	</node>

	<!-- Bring up move_base -->
	<include if="$(arg do_move_base)" file="$(find lysander)/launch/move_base.launch" >
	</include>

	<!-- Experimental laser line segment launch -->
	<!--node name="line_extractor" pkg="laser_line_extraction" type="line_extraction_node">
		<param name="~bearing_std_dev" value="0.0261799" />
		<param name="~frame_id" value="laser_frame" />
		<param name="~frequency" value="2.0" />
		<param name="~least_sq_angle_thresh" value="0.002" />
		<param name="~least_sq_radius_thresh" value="0.002" />
		<param name="~max_line_gap" value="0.5" />
		<param name="~min_line_length" value="0.15" />
		<param name="~min_line_points" value="6" />
		<param name="~min_range" value="0.15" />
		<param name="~min_split_dist" value="0.5" />
		<param name="~outlier_dist" value="0.2" />
		<param name="~publish_markers" value="true" />
		<param name="~range_std_dev" value="0.05" />
		<param name="~scan_topic" value="scan" />
	</node-->

  <node pkg="lysander" type="lysander_node" respawn="true" name="laser_lines" output="screen">
    <!--remap from="scan" to="base_scan" /-->
    <remap from="lines" to="laser_lines" />

    <!-- Maximum number of iterations for RANSAC line detection --> 
    <param name="line_segmentation_max_iterations" value="250" type="double" />
    <!-- Maximum distance of points to a line model to support it -->
    <param name="line_segmentation_distance_threshold" value="0.1" type="double" />
    <!-- Maximum distance from existing points to sample more points from.
      This allows to avoid detecting lines which are supported by points far apart.  -->
    <param name="line_segmentation_sample_max_dist" value="0.3" type="double" />
    <!-- Minimum number of points required before considering a line. -->
    <param name="line_segmentation_min_inliers" value="5" type="int" />
    <!-- Minimum length of detected lines to consider them. -->
    <param name="line_min_length" value="0.3" type="double" />
    <!-- After a line is found, it is clustered again to remove large gaps, ie.
         only the longest line will survive. The cluster tolerance defines the
	 maximum gap size to accept. -->
    <param name="line_cluster_tolerance" value="0.4" type="double" />
    <!-- At least this fraction of the points of the original line model must
         survive clustering, otherwise the line is rejected. -->
    <param name="line_cluster_quota" value="0.5" type="double" />
    <!-- The minimum distance of the point on line to the sensor frame. -->
    <param name="line_min_distance" value="0.1" type="double" />
    <!-- If a point on line has moved from the previous data by at least this
         much consider it to be a different cluster. -->
    <param name="switch_tolerance" value="0.3" type="double" />
  </node>

	<!-- Experimental floorbot_l1 node -->
	<!--node pkg="lysander" type="lysander_node" name="lysander_node" output="screen" respawn="false" /-->

</launch>

<!--
  <node pkg="tf" type="static_transform_publisher" name="map_nav_broadcaster" args="0 0 0 0 0 0 map nav 100"/>

  <arg name="do_amcl" default="false" />
  <arg name="do_map_server" default="false" />
  <arg name="do_move_base" default="false" />

  <node if="$(arg do_map_server)" name="map_server" pkg="map_server" type="map_server" args="$(find lysander)/params/map.yaml" output="screen" >
    <param name="frame_id" value="/odom" />
  </node>

  <node name="motor_controller_node" pkg="motor_controller"  type="motor_controller_node" output="screen" >
    <rosparam command="load" file="$(find motor_controller)/cfg/motor.yaml"/>
    <param name="do_odom_tf" value="false" />
  </node>

  <node pkg="amcl" if="$(arg do_amcl)" type="amcl" name="amcl" output="screen" launch-prefix="xterm -e gdb -args">
  <node if="$(arg do_amcl)" pkg="amcl" type="amcl" name="amcl" output="screen" >
    <remap from="scan" to="scan" />
    <param name="use_map_topic" value="false" />

    <param name="odom_model_type" value="diff"/>
    <param name="odom_alpha5" value="0.1"/>
    <param name="transform_tolerance" value="0.05" />
    <param name="gui_publish_rate" value="10.0"/>
    <param name="laser_max_beams" value="500"/>
    <param name="min_particles" value="500"/>
    <param name="max_particles" value="1000"/>
    <param name="kld_err" value="0.01"/>
    <param name="kld_z" value="0.99"/>
    <param name="odom_alpha1" value="0.8"/>
    <param name="odom_alpha2" value="0.8"/>
    <param name="odom_alpha3" value="0.2"/>
    <param name="odom_alpha4" value="0.2"/>
    <param name="laser_z_hit" value="0.95"/>
    <param name="laser_z_short" value="0.05"/>
    <param name="laser_z_max" value="0.05"/>
    <param name="laser_z_rand" value="0.05"/>
    <param name="laser_sigma_hit" value="0.2"/>
    <param name="laser_lambda_short" value="0.1"/>
    <param name="laser_model_type" value="likelihood_field"/> 
    <param name="laser_likelihood_max_dist" value="0.3"/>
    <param name="update_min_d" value="0.2"/>
    <param name="update_min_a" value="0.2"/>
    <param name="odom_frame_id" value="odom"/>
    <param name="resample_interval" value="1"/>
    <param name="recovery_alpha_slow" value="0.0"/>
    <param name="recovery_alpha_fast" value="0.0"/>
  </node>

  <node if="$(arg do_move_base)" pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" >
lysander
    <remap from="cmd_vel" to="/cmd_vel_mux/input/teleop" />
    <rosparam file="$(find lysander)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find lysander)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find lysander)/params/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find lysander)/params/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find lysander)/params/base_local_planner_params.yaml" command="load" />
  </node>
-->
