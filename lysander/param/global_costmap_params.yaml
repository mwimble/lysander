global_costmap:
  # always_send_full_costmap: false
  # footprint_padding: 0.01
  global_frame: 'map'
  height: 6.0
  inflation_radius: 0.25
  publish_frequency: 2.0
  resolution: 0.05
  robot_base_frame: 'base_link'
  # robot_radius: 0.0
  rolling_window: false
  static_map: true
  # transform_tolerance: 2.0 
  update_frequency: 5.0
  width: 6.0

  plugins:
    - { name: obstacle_layer, type: 'costmap_2d::ObstacleLayer' }
    - { name: 'static_map', type: 'costmap_2d::StaticLayer' }
    - { name: 'inflation_layer', type: 'costmap_2d::InflationLayer' }

  inflation_layer:
    enabled: true               # true/false
    inflation_radius: 0.25      # 0.0 .. 50.0
    cost_scaling_factor: 5.0    # 0.0 .. 100


  obstacle_layer:
    #clearing: false
    combination_method: 1   # 0 - overwrite, 1 - Maximum
    #data_type: "PointCloud"
    enabled: true
    footprint_clearing_enabled: false
    #inf_is_valid: true #false
    #laser_scan_sensor: { clearing: true, data_type: LaserScan, expected_update_rate: 2.0, marking: true, sensor_frame: 'scan', topic: '/lysander/scan' }
    #marking: true
    #max_obstacle_height: 2.0 #2.0
    #min_obstacle_height: 0.0
    #observation_persistence: 0.0
    #observation_sources: 'laser_scan_sensor'
    #obstacle_range: 5.0
    #raytrace_range: 6.0
    #sensor_frame: ""
  
  static_map:
    enabled: true               # true/false
    cost_scaling_factor: 10.0
    inflation_radius: 0.25
    map_topic: /lysander/map
    track_unknown_space: true
    unknown_cost_value: 253
    
base_global_planner: "carrot_planner/CarrotPlanner"
# base_global_planner: "global_planner/GlobalPlanner"
# GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
#   old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
#   use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
#   use_dijkstra: true                            # Use dijkstra's algorithm. Otherwise, A*, default true
#   use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  
#   allow_unknown: true                           # Allow planner to plan through unknown space, default true
#                                                 #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
#   planner_window_x: 0.0                         # default 0.0
#   planner_window_y: 0.0                         # default 0.0
#   default_tolerance: 0.0                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
#   publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
#   planner_costmap_publish_frequency: 0.0        # default 0.0
  
#   lethal_cost: 253                              # default 253
#   neutral_cost: 50                              # default 50
#   cost_factor: 3.0                              # Factor to multiply each cost from costmap by, default 3.0
#   publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true
